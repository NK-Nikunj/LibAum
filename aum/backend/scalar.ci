// Copyright (C) 2022 Nikunj Gupta
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
//  Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program. If not, see <https://www.gnu.org/licenses/>.

module Scalar
{
    chare Scalar
    {
        ////////////////////////////////////////////////////////////////////////
        // Basic Constructors                                                 //
        ////////////////////////////////////////////////////////////////////////
        entry Scalar(); // Initialize
        entry Scalar(double);   // Value

        ////////////////////////////////////////////////////////////////////////
        // Operation over Scalar                                              //
        ////////////////////////////////////////////////////////////////////////
        entry void initialize_operation()
        {
            for (; WRITE_TAG > -1;)
            {
                case
                {
                    // Addition over scalars
                    when
                        add[WRITE_TAG](int write_tag),
                        input_scalar_1[WRITE_TAG](int write_tag, double v1),
                        input_scalar_2[WRITE_TAG](int write_tag, double v2)
                    {
                        serial "add"
                        {
                            value = v1 + v2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Subtraction over scalars
                    when
                        subtract[WRITE_TAG](int write_tag),
                        input_scalar_1[WRITE_TAG](int write_tag, double v1),
                        input_scalar_2[WRITE_TAG](int write_tag, double v2)
                    {
                        serial "subtract"
                        {
                            value = v1 - v2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Multiplication over scalars
                    when
                        multiply[WRITE_TAG](int write_tag),
                        input_scalar_1[WRITE_TAG](int write_tag, double v1),
                        input_scalar_2[WRITE_TAG](int write_tag, double v2)
                    {
                        serial "multiply"
                        {
                            value = v1 * v2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Division over scalars
                    when
                        divide[WRITE_TAG](int write_tag),
                        input_scalar_1[WRITE_TAG](int write_tag, double v1),
                        input_scalar_2[WRITE_TAG](int write_tag, double v2)
                    {
                        serial "divide"
                        {
                            value = v1 / v2;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Reduction target
                    when
                        set_reduced_value[WRITE_TAG](double val)
                    {
                        serial "set_reduced_value"
                        {
                            value = val;

                            // Operation is now complete - set up read facility
                            // on this data.
                            ++WRITE_TAG;
                            READ_TAG = WRITE_TAG + 1;
                        }
                    }

                    // Printer
                    when
                        print_value[READ_TAG](int read_tag)
                    {
                        serial "print_value"
                        {
                            ckout << "Value in Scalar: " << value << endl;

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    when send_to_1[READ_TAG](int read_tag, int write_tag, CProxy_Scalar ps)
                    {
                        serial "send_to_1"
                        {
                            ps.input_scalar_1(write_tag, value);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    when send_to_2[READ_TAG](int read_tag, int write_tag, CProxy_Scalar ps)
                    {
                        serial "send_to_2"
                        {
                            ps.input_scalar_2(write_tag, value);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send_to_vector:
                    // Helper function to send the value of underlying vector
                    // to the site where an operation is to be performed.
                    when send_to_vector[READ_TAG](int read_tag, int write_tag, CProxy_Vector pv)
                    {
                        serial "send_to_1_vector"
                        {
                            pv.input_vector_1(write_tag, value);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation send_to_matrix:
                    // Helper function to send the value of underlying Matrix
                    // to the site where an operation is to be performed.
                    when send_to_matrix[READ_TAG](int read_tag, int write_tag, CProxy_Matrix pv)
                    {
                        serial "send_to_1_matrix"
                        {
                            pv.input_matrix_1(write_tag, value);

                            // Another read occured. Update write tag by one so
                            // when write operation is called with 
                            // (read_tag + num of writes) it calls the
                            // appropriate operation.
                            ++WRITE_TAG;
                        }
                    }

                    // Operation exit
                    // Helper function that exits the program when called.
                    when exit[READ_TAG](int read_tag)
                    {
                        serial "exit"
                        {
                            ckout << "Exiting..." << endl;

                            CkExit();
                        }
                    }

                    // Operation exit
                    // Helper function that prints the time taken to execute
                    // up to this point in the program and then exits.
                    when exit[READ_TAG](int read_tag, double start)
                    {
                        serial "exit_with_timer"
                        {
                            double end = CkWallTimer();

                            ckout << "Execution Time: " << end - start << endl;
                            ckout << "Exiting..." << endl;
                            CkExit();
                        }
                    }
                }
            }
        }

        entry void add(int);
        entry void subtract(int);
        entry void multiply(int);
        entry void divide(int);
        entry void input_scalar_1(int, double);
        entry void input_scalar_2(int, double);
        entry void send_to_1(int, int, CProxy_Scalar);
        entry void send_to_2(int, int, CProxy_Scalar);
        entry void send_to_vector(int, int, CProxy_Vector);
        entry void send_to_matrix(int, int, CProxy_Matrix);
        entry [reductiontarget] void set_reduced_value(double);
        entry void print_value(int);
        entry void exit(int);
        entry void exit(int, double);
    }
}
